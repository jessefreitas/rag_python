#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üåê HANDLER HTTP PARA EXTENS√ÉO CHROME
Sistema de endpoints HTTP para comunica√ß√£o com extens√£o Chrome via Streamlit
"""

import streamlit as st
import json
from datetime import datetime
from typing import Dict, Any
from extension_api_endpoints import extension_api, handle_extension_request

def handle_api_requests():
    """
    Processa requisi√ß√µes de API via query parameters
    Usado pela extens√£o Chrome para conectar ao sistema
    """
    
    # Verificar se h√° par√¢metros de API na URL
    query_params = st.query_params
    
    if 'api' in query_params:
        api_endpoint = query_params['api']
        
        # Extrair par√¢metros adicionais
        connection_id = query_params.get('connection_id', None)
        
        # Processar diferentes endpoints
        if api_endpoint == 'health':
            # Health check endpoint
            result = extension_api.get_health_status(connection_id)
            
            # Retornar JSON diretamente
            st.json(result)
            st.stop()
            
        elif api_endpoint == 'agents':
            # Agentes endpoint
            result = extension_api.get_agents_list(connection_id)
            
            # Retornar JSON diretamente
            st.json(result)
            st.stop()
            
        elif api_endpoint == 'stats':
            # Estat√≠sticas endpoint
            result = extension_api.get_connection_stats()
            
            # Retornar JSON diretamente
            st.json(result)
            st.stop()
            
        else:
            # Endpoint n√£o encontrado
            error_result = {
                "status": "error",
                "message": f"Endpoint n√£o encontrado: {api_endpoint}",
                "available_endpoints": ["health", "agents", "stats"]
            }
            
            st.json(error_result)
            st.stop()

def setup_api_endpoints():
    """
    Configura os endpoints de API no in√≠cio da aplica√ß√£o
    """
    
    # Verificar se √© uma requisi√ß√£o de API
    query_params = st.query_params
    
    if 'api' in query_params:
        # Configurar headers para JSON
        st.set_page_config(
            page_title="RAG API",
            page_icon="üîå",
            layout="centered"
        )
        
        # Processar requisi√ß√£o de API
        handle_api_requests()
    
    return False  # N√£o √© uma requisi√ß√£o de API

def render_api_documentation():
    """
    Renderiza documenta√ß√£o da API para desenvolvedores
    """
    
    st.markdown("## üîå API Endpoints para Extens√£o Chrome")
    st.markdown("---")
    
    # Health Check
    st.markdown("### üè• Health Check")
    st.code("GET /?api=health&connection_id=opcional")
    st.markdown("Verifica se o servidor est√° funcionando e registra/atualiza conex√£o.")
    
    with st.expander("Exemplo de Resposta - Health Check"):
        example_health = {
            "status": "connected",
            "server": "RAG Python v1.5.3",
            "timestamp": "2025-06-23T01:30:00",
            "uptime": 3600.5,
            "connection_id": "abc123",
            "total_connections": 2,
            "total_requests": 15
        }
        st.json(example_health)
    
    # Agentes
    st.markdown("### üë• Lista de Agentes")
    st.code("GET /?api=agents&connection_id=opcional")
    st.markdown("Retorna lista de agentes dispon√≠veis no sistema.")
    
    with st.expander("Exemplo de Resposta - Agentes"):
        example_agents = {
            "status": "success",
            "connection_id": "abc123",
            "agents": [
                {
                    "id": "agent-001",
                    "name": "Agente Jur√≠dico",
                    "description": "Especialista em direito civil",
                    "type": "specialized",
                    "status": "active",
                    "documents_count": 5
                }
            ],
            "total": 1,
            "timestamp": "2025-06-23T01:30:00"
        }
        st.json(example_agents)
    
    # Estat√≠sticas
    st.markdown("### üìä Estat√≠sticas de Conex√£o")
    st.code("GET /?api=stats")
    st.markdown("Retorna estat√≠sticas das conex√µes ativas.")
    
    with st.expander("Exemplo de Resposta - Estat√≠sticas"):
        example_stats = {
            "active_connections": 2,
            "total_requests": 15,
            "uptime": 3600.5,
            "connections": [
                {
                    "id": "abc123",
                    "duration": 1800.0,
                    "requests": 8,
                    "last_activity": "2025-06-23T01:30:00"
                }
            ],
            "success_rate": 95.5,
            "last_activity": "2025-06-23T01:30:00"
        }
        st.json(example_stats)
    
    # URLs de Teste
    st.markdown("### üîß URLs de Teste")
    
    base_url = "http://localhost:8501"
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**Health Check:**")
        health_url = f"{base_url}/?api=health"
        st.code(health_url)
        if st.button("üè• Testar Health", key="test_health"):
            st.markdown(f"[Abrir Health Check]({health_url})")
    
    with col2:
        st.markdown("**Agentes:**")
        agents_url = f"{base_url}/?api=agents"
        st.code(agents_url)
        if st.button("üë• Testar Agentes", key="test_agents"):
            st.markdown(f"[Abrir Agentes]({agents_url})")
    
    with col3:
        st.markdown("**Estat√≠sticas:**")
        stats_url = f"{base_url}/?api=stats"
        st.code(stats_url)
        if st.button("üìä Testar Stats", key="test_stats"):
            st.markdown(f"[Abrir Estat√≠sticas]({stats_url})")

if __name__ == "__main__":
    st.title("üîå RAG Python - API Handler")
    render_api_documentation() 