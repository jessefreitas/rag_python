"""
Interface Streamlit para Agentes de IA integrados com RAG
Permite interagir com diferentes tipos de agentes
"""

import streamlit as st
import os
import json
from datetime import datetime
from typing import Dict, Any

from agent_system import (
    MultiAgentSystem, 
    ConversationalAgent, 
    ResearchAgent, 
    TaskExecutorAgent,
    create_agent
)
from rag_system import RAGSystem
from ragflow_client import RAGFlowRAGSystem

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Agentes RAG - Sistema Inteligente",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .agent-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border-left: 4px solid #1f77b4;
    }
    .response-box {
        background-color: #e8f4fd;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        border-left: 4px solid #2ca02c;
    }
    .error-box {
        background-color: #ffe6e6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        border-left: 4px solid #d62728;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        text-align: center;
        border: 1px solid #dee2e6;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def initialize_systems():
    """Inicializa os sistemas RAG e agentes"""
    try:
        # Verificar qual sistema RAG usar
        use_ragflow = st.session_state.get('use_ragflow', False)
        
        if use_ragflow:
            # Usar RAGFlow
            rag_system = RAGFlowRAGSystem(
                base_url=os.getenv("RAGFLOW_BASE_URL", "http://localhost:9380"),
                api_key=os.getenv("RAGFLOW_API_KEY")
            )
        else:
            # Usar RAG Python local
            rag_system = RAGSystem()
        
        # Criar sistema multi-agente
        multi_agent_system = MultiAgentSystem(rag_system)
        
        return rag_system, multi_agent_system
        
    except Exception as e:
        st.error(f"Erro ao inicializar sistemas: {str(e)}")
        return None, None

def display_agent_info(agent_name: str, agent_info: Dict[str, Any]):
    """Exibe informa√ß√µes do agente"""
    with st.expander(f"üìã Informa√ß√µes do Agente: {agent_name}"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"**Nome:** {agent_info['name']}")
            st.write(f"**Descri√ß√£o:** {agent_info['description']}")
            st.write(f"**Modelo:** {agent_info['model']}")
        
        with col2:
            st.write(f"**Temperatura:** {agent_info['temperature']}")
            st.write(f"**Mem√≥ria:** {'Ativada' if agent_info['memory_enabled'] else 'Desativada'}")
            st.write(f"**Ferramentas:** {', '.join(agent_info['tools'])}")

def display_response(response, agent_name: str):
    """Exibe a resposta do agente"""
    st.markdown(f"### ü§ñ Resposta do {agent_name}")
    
    # Exibir conte√∫do principal
    st.markdown(f"""
    <div class="response-box">
        {response.content}
    </div>
    """, unsafe_allow_html=True)
    
    # Exibir metadados
    with st.expander("üìä Metadados da Resposta"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Confian√ßa", f"{response.confidence:.2f}")
        
        with col2:
            st.metric("A√ß√µes Realizadas", len(response.actions_taken))
        
        with col3:
            st.metric("Fontes", len(response.sources))
        
        # Exibir a√ß√µes realizadas
        if response.actions_taken:
            st.write("**A√ß√µes Realizadas:**")
            for action in response.actions_taken:
                st.write(f"‚Ä¢ {action}")
        
        # Exibir fontes
        if response.sources:
            st.write("**Fontes:**")
            for source in response.sources:
                st.write(f"‚Ä¢ {source}")
        
        # Exibir metadados completos
        st.write("**Metadados Completos:**")
        st.json(response.metadata)

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # T√≠tulo principal
    st.title("ü§ñ Sistema de Agentes RAG")
    st.markdown("Sistema inteligente que combina agentes de IA com RAG para respostas baseadas em documentos")
    
    # Sidebar para configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Sele√ß√£o do sistema RAG
        use_ragflow = st.checkbox(
            "Usar RAGFlow (API)",
            value=st.session_state.get('use_ragflow', False),
            help="Marque para usar RAGFlow via API em vez do RAG Python local"
        )
        st.session_state['use_ragflow'] = use_ragflow
        
        # Configura√ß√µes de API
        if use_ragflow:
            st.subheader("üîó Configura√ß√µes RAGFlow")
            ragflow_url = st.text_input(
                "URL do RAGFlow",
                value=os.getenv("RAGFLOW_BASE_URL", "http://localhost:9380"),
                help="URL base da API do RAGFlow"
            )
            ragflow_key = st.text_input(
                "API Key do RAGFlow",
                value=os.getenv("RAGFLOW_API_KEY", ""),
                type="password",
                help="Chave de API do RAGFlow"
            )
            
            # Atualizar vari√°veis de ambiente
            os.environ["RAGFLOW_BASE_URL"] = ragflow_url
            os.environ["RAGFLOW_API_KEY"] = ragflow_key
        
        # Configura√ß√µes do OpenAI
        st.subheader("üîë Configura√ß√µes OpenAI")
        openai_key = st.text_input(
            "OpenAI API Key",
            value=os.getenv("OPENAI_API_KEY", ""),
            type="password",
            help="Chave de API do OpenAI"
        )
        os.environ["OPENAI_API_KEY"] = openai_key
        
        # Bot√£o para reinicializar sistemas
        if st.button("üîÑ Reinicializar Sistemas"):
            st.cache_resource.clear()
            st.rerun()
    
    # Verificar se as chaves est√£o configuradas
    if not os.getenv("OPENAI_API_KEY"):
        st.error("‚ö†Ô∏è OpenAI API Key n√£o configurada. Configure na sidebar.")
        return
    
    if use_ragflow and not os.getenv("RAGFLOW_API_KEY"):
        st.warning("‚ö†Ô∏è RAGFlow API Key n√£o configurada. Configure na sidebar.")
    
    # Inicializar sistemas
    rag_system, multi_agent_system = initialize_systems()
    
    if not rag_system or not multi_agent_system:
        st.error("‚ùå Erro ao inicializar sistemas. Verifique as configura√ß√µes.")
        return
    
    # Tabs principais
    tab1, tab2, tab3, tab4 = st.tabs([
        "üí¨ Conversa Inteligente", 
        "üîç Pesquisa Avan√ßada", 
        "‚ö° Executor de Tarefas",
        "üìä Status do Sistema"
    ])
    
    # Tab 1: Conversa Inteligente
    with tab1:
        st.header("üí¨ Conversa Inteligente")
        st.markdown("Converse com o agente conversacional que usa RAG para respostas informadas")
        
        # √Årea de chat
        if "conversation_history" not in st.session_state:
            st.session_state.conversation_history = []
        
        # Exibir hist√≥rico
        for message in st.session_state.conversation_history:
            if message["role"] == "user":
                st.write(f"üë§ **Voc√™:** {message['content']}")
            else:
                st.write(f"ü§ñ **Agente:** {message['content']}")
        
        # Input do usu√°rio
        user_input = st.text_area(
            "Digite sua mensagem:",
            height=100,
            placeholder="Fa√ßa uma pergunta ou inicie uma conversa..."
        )
        
        col1, col2 = st.columns([1, 4])
        with col1:
            send_button = st.button("üöÄ Enviar", type="primary")
        
        with col2:
            clear_button = st.button("üóëÔ∏è Limpar Hist√≥rico")
        
        if clear_button:
            st.session_state.conversation_history = []
            st.rerun()
        
        if send_button and user_input:
            with st.spinner("ü§ñ Processando..."):
                try:
                    # Processar com agente conversacional
                    response = multi_agent_system.agents["conversational"].process(user_input)
                    
                    # Adicionar ao hist√≥rico
                    st.session_state.conversation_history.append({
                        "role": "user",
                        "content": user_input,
                        "timestamp": datetime.now().isoformat()
                    })
                    st.session_state.conversation_history.append({
                        "role": "assistant",
                        "content": response.content,
                        "timestamp": datetime.now().isoformat()
                    })
                    
                    # Exibir resposta
                    display_response(response, "Conversacional")
                    
                except Exception as e:
                    st.error(f"Erro no processamento: {str(e)}")
    
    # Tab 2: Pesquisa Avan√ßada
    with tab2:
        st.header("üîç Pesquisa Avan√ßada")
        st.markdown("Use o agente de pesquisa para an√°lises detalhadas de documentos")
        
        # Input de pesquisa
        research_topic = st.text_input(
            "T√≥pico de pesquisa:",
            placeholder="Digite o t√≥pico que deseja pesquisar nos documentos..."
        )
        
        if st.button("üîç Iniciar Pesquisa", type="primary") and research_topic:
            with st.spinner("üîç Realizando pesquisa..."):
                try:
                    # Usar agente de pesquisa
                    research_agent = multi_agent_system.agents["research"]
                    response = research_agent.analyze_documents(research_topic)
                    
                    # Exibir resultados
                    display_response(response, "Pesquisa")
                    
                except Exception as e:
                    st.error(f"Erro na pesquisa: {str(e)}")
    
    # Tab 3: Executor de Tarefas
    with tab3:
        st.header("‚ö° Executor de Tarefas")
        st.markdown("Use o agente executor para realizar tarefas espec√≠ficas baseadas nos documentos")
        
        # Sele√ß√£o de tipo de tarefa
        task_type = st.selectbox(
            "Tipo de Tarefa:",
            [
                "An√°lise de Documento",
                "Resumo Executivo",
                "Extra√ß√£o de Informa√ß√µes",
                "Compara√ß√£o de Documentos",
                "Recomenda√ß√µes",
                "Tarefa Personalizada"
            ]
        )
        
        # Input da tarefa
        if task_type == "Tarefa Personalizada":
            task_description = st.text_area(
                "Descri√ß√£o da Tarefa:",
                height=150,
                placeholder="Descreva detalhadamente a tarefa que deseja executar..."
            )
        else:
            task_description = st.text_area(
                f"Detalhes da {task_type}:",
                height=150,
                placeholder=f"Descreva os detalhes para {task_type.lower()}..."
            )
        
        if st.button("‚ö° Executar Tarefa", type="primary") and task_description:
            with st.spinner("‚ö° Executando tarefa..."):
                try:
                    # Usar agente executor
                    executor_agent = multi_agent_system.agents["executor"]
                    response = executor_agent.execute_task(task_description)
                    
                    # Exibir resultados
                    display_response(response, "Executor")
                    
                except Exception as e:
                    st.error(f"Erro na execu√ß√£o: {str(e)}")
    
    # Tab 4: Status do Sistema
    with tab4:
        st.header("üìä Status do Sistema")
        
        # Status dos agentes
        st.subheader("ü§ñ Status dos Agentes")
        agent_status = multi_agent_system.get_agent_status()
        
        for agent_name, agent_info in agent_status.items():
            display_agent_info(agent_name, agent_info)
        
        # M√©tricas do sistema
        st.subheader("üìà M√©tricas do Sistema")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Agentes Ativos",
                len(multi_agent_system.agents),
                help="N√∫mero total de agentes dispon√≠veis"
            )
        
        with col2:
            st.metric(
                "Sistema RAG",
                "RAGFlow" if use_ragflow else "RAG Python",
                help="Sistema RAG em uso"
            )
        
        with col3:
            st.metric(
                "Conversas",
                len(st.session_state.get("conversation_history", [])),
                help="N√∫mero de mensagens no hist√≥rico"
            )
        
        with col4:
            st.metric(
                "Status",
                "üü¢ Ativo" if rag_system and multi_agent_system else "üî¥ Inativo",
                help="Status geral do sistema"
            )
        
        # Informa√ß√µes do sistema
        st.subheader("‚ÑπÔ∏è Informa√ß√µes do Sistema")
        
        system_info = {
            "Sistema RAG": "RAGFlow (API)" if use_ragflow else "RAG Python (Local)",
            "Agentes Dispon√≠veis": list(multi_agent_system.agents.keys()),
            "Mem√≥ria Ativada": any(agent.config.memory for agent in multi_agent_system.agents.values()),
            "Ferramentas RAG": ["rag_query", "search_documents"],
            "√öltima Atualiza√ß√£o": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        st.json(system_info)

if __name__ == "__main__":
    main() 