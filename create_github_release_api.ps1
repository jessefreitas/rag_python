# Script PowerShell para criar GitHub Release v1.5.1 via API REST
# Requer Personal Access Token do GitHub

param(
    [string]$Token = $env:GITHUB_TOKEN
)

# Configura√ß√µes
$Owner = "jessefreitas"
$Repo = "rag_python"
$TagName = "v1.5.1-release"
$ReleaseName = "üöÄ RAG Python v1.5.1 - Production Release"

# Release Notes
$ReleaseBody = @"
## üìä **Resumo da Release**

Esta √© uma **release de produ√ß√£o** com sistema completamente testado e validado. O RAG Python v1.5.1 representa um marco significativo com **100% dos testes passando** e pipeline CI/CD profissional implementado.

## ‚ú® **Principais Novidades**

### ü§ñ **CrewAI Orchestration**
- **4 pipelines especializados** para workflows jur√≠dicos
- **Orquestra√ß√£o inteligente** de agentes especializados
- **Execu√ß√£o paralela** e ass√≠ncrona de workflows
- **Monitoramento** em tempo real de execu√ß√µes

### üìÑ **Sistema de Gera√ß√£o de Documentos**
- **Templates jur√≠dicos** din√¢micos com Jinja2
- **Convers√£o autom√°tica** para PDF (Windows/Linux)
- **Integra√ß√£o com IA** para melhoramento de documentos
- **Verifica√ß√£o de privacidade** integrada

### üîí **Compliance LGPD Avan√ßado**
- **Privacy by Design** nativo
- **4 n√≠veis de prote√ß√£o** de dados
- **Detec√ß√£o autom√°tica** de PII
- **Anonimiza√ß√£o** inteligente
- **Auditoria completa** de dados

### üß™ **Pipeline CI/CD Profissional**
- **GitHub Actions** com 8 jobs especializados
- **Multi-Python testing** (3.10, 3.11, 3.12)
- **Security scanning** (Bandit, Safety)
- **Coverage reporting** (44%)
- **Deployment autom√°tico**

## üìã **Resultados dos Testes**

### ‚úÖ **100% Success Rate**
```
Total: 33 testes
Passed: 33 ‚úÖ
Failed: 0 ‚ùå
Success Rate: 100%
```

### üéØ **Cobertura por Sistema**
- **Privacy System (LGPD):** 5/5 testes ‚úÖ
- **CrewAI Orchestrator:** 3/3 testes ‚úÖ
- **Document Generation:** 3/3 testes ‚úÖ
- **LLM Providers:** 3/3 testes ‚úÖ
- **Agent System:** 2/2 testes ‚úÖ
- **Integration:** 2/2 testes ‚úÖ

## üöÄ **Instala√ß√£o R√°pida**

```bash
# Clone do reposit√≥rio
git clone https://github.com/jessefreitas/rag_python.git
cd rag_python

# Checkout da vers√£o est√°vel
git checkout v1.5.1-release

# Instala√ß√£o de depend√™ncias
pip install -r requirements.txt

# Execu√ß√£o dos testes
pytest

# Iniciar sistema
python api_server.py
```

## üì¶ **Assets da Release**

- **RELEASE_NOTES_v1.5.1.md** - Documenta√ß√£o completa
- **QUICK_START_v1.5.1.md** - Guia de instala√ß√£o r√°pida
- **requirements.txt** - Depend√™ncias Python
- **pytest.ini** - Configura√ß√£o de testes
- **test_results_v1.5.0_final.json** - Resultados dos testes

## üéØ **Funcionalidades Principais**
- ‚úÖ Sistema RAG multi-modal
- ‚úÖ CrewAI Orchestration (4 pipelines especializados)
- ‚úÖ Document Generation (templates jur√≠dicos)
- ‚úÖ Privacy System (LGPD compliant)
- ‚úÖ Multi-LLM (OpenAI, Google, OpenRouter, DeepSeek)
- ‚úÖ API REST FastAPI
- ‚úÖ Interfaces Streamlit
- ‚úÖ Chrome Extension

**Esta release est√° pronta para uso em produ√ß√£o!** üöÄ

---

**Baixe agora e experimente o futuro dos sistemas RAG inteligentes!**
"@

function Create-GitHubRelease {
    param(
        [string]$Owner,
        [string]$Repo,
        [string]$TagName,
        [string]$ReleaseName,
        [string]$ReleaseBody,
        [string]$Token
    )
    
    if (-not $Token) {
        Write-Host "‚ùå Token do GitHub n√£o fornecido!" -ForegroundColor Red
        Write-Host "üí° Defina a vari√°vel GITHUB_TOKEN ou passe como par√¢metro" -ForegroundColor Yellow
        Write-Host "üîó Criar token: https://github.com/settings/tokens" -ForegroundColor Cyan
        return $false
    }
    
    $Uri = "https://api.github.com/repos/$Owner/$Repo/releases"
    
    $Headers = @{
        "Authorization" = "token $Token"
        "Accept" = "application/vnd.github.v3+json"
        "User-Agent" = "PowerShell-GitHubRelease"
    }
    
    $Body = @{
        "tag_name" = $TagName
        "target_commitish" = "main"
        "name" = $ReleaseName
        "body" = $ReleaseBody
        "draft" = $false
        "prerelease" = $false
        "make_latest" = "true"
    } | ConvertTo-Json
    
    try {
        Write-Host "üöÄ Criando GitHub Release..." -ForegroundColor Green
        Write-Host "üìã Tag: $TagName" -ForegroundColor Cyan
        Write-Host "üìã Nome: $ReleaseName" -ForegroundColor Cyan
        
        $Response = Invoke-RestMethod -Uri $Uri -Method Post -Headers $Headers -Body $Body -ContentType "application/json"
        
        Write-Host "üéâ Release criada com sucesso!" -ForegroundColor Green
        Write-Host "üîó URL: $($Response.html_url)" -ForegroundColor Cyan
        Write-Host "üì¶ Download: $($Response.zipball_url)" -ForegroundColor Cyan
        
        return $Response
    }
    catch {
        Write-Host "‚ùå Erro ao criar release:" -ForegroundColor Red
        Write-Host $_.Exception.Message -ForegroundColor Red
        
        if ($_.Exception.Response) {
            $ErrorResponse = $_.Exception.Response.GetResponseStream()
            $Reader = New-Object System.IO.StreamReader($ErrorResponse)
            $ErrorBody = $Reader.ReadToEnd()
            Write-Host "üìã Detalhes do erro: $ErrorBody" -ForegroundColor Yellow
        }
        
        return $false
    }
}

function Upload-ReleaseAsset {
    param(
        [string]$UploadUrl,
        [string]$FilePath,
        [string]$Token
    )
    
    if (-not (Test-Path $FilePath)) {
        Write-Host "‚ö†Ô∏è  Arquivo n√£o encontrado: $FilePath" -ForegroundColor Yellow
        return $false
    }
    
    $FileName = Split-Path $FilePath -Leaf
    $ContentType = "application/octet-stream"
    
    # Determinar content-type baseado na extens√£o
    switch ([System.IO.Path]::GetExtension($FilePath).ToLower()) {
        ".md" { $ContentType = "text/markdown" }
        ".txt" { $ContentType = "text/plain" }
        ".json" { $ContentType = "application/json" }
        ".ini" { $ContentType = "text/plain" }
    }
    
    $UploadUrlClean = $UploadUrl -replace "\{.*\}", ""
    $Uri = "$UploadUrlClean?name=$FileName"
    
    $Headers = @{
        "Authorization" = "token $Token"
        "Content-Type" = $ContentType
        "User-Agent" = "PowerShell-GitHubRelease"
    }
    
    try {
        Write-Host "üìé Uploading: $FileName" -ForegroundColor Cyan
        $FileBytes = [System.IO.File]::ReadAllBytes($FilePath)
        $Response = Invoke-RestMethod -Uri $Uri -Method Post -Headers $Headers -Body $FileBytes
        Write-Host "‚úÖ Upload conclu√≠do: $FileName" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå Erro no upload de $FileName : $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Execu√ß√£o principal
Write-Host "üéØ RAG Python v1.5.1 - GitHub Release Creator" -ForegroundColor Magenta
Write-Host "=" * 50 -ForegroundColor Gray

# Verificar se estamos no reposit√≥rio correto
$CurrentRepo = git remote get-url origin 2>$null
if ($CurrentRepo -notlike "*jessefreitas/rag_python*") {
    Write-Host "‚ö†Ô∏è  Aviso: N√£o parece estar no reposit√≥rio correto" -ForegroundColor Yellow
    Write-Host "üìã Reposit√≥rio atual: $CurrentRepo" -ForegroundColor Cyan
}

# Criar release
$Release = Create-GitHubRelease -Owner $Owner -Repo $Repo -TagName $TagName -ReleaseName $ReleaseName -ReleaseBody $ReleaseBody -Token $Token

if ($Release) {
    # Assets para upload
    $Assets = @(
        "release-assets/RELEASE_NOTES_v1.5.1.md",
        "release-assets/QUICK_START_v1.5.1.md",
        "release-assets/requirements.txt",
        "release-assets/pytest.ini",
        "release-assets/test_results_v1.5.0_final.json"
    )
    
    Write-Host "`nüì¶ Fazendo upload dos assets..." -ForegroundColor Green
    
    foreach ($Asset in $Assets) {
        if (Test-Path $Asset) {
            Upload-ReleaseAsset -UploadUrl $Release.upload_url -FilePath $Asset -Token $Token
        } else {
            Write-Host "‚ö†Ô∏è  Asset n√£o encontrado: $Asset" -ForegroundColor Yellow
        }
    }
    
    Write-Host "`nüéä Release v1.5.1 publicada com sucesso!" -ForegroundColor Green
    Write-Host "üîó Acesse: $($Release.html_url)" -ForegroundColor Cyan
} else {
    Write-Host "`nüìã INSTRU√á√ïES MANUAIS:" -ForegroundColor Yellow
    Write-Host "1. Acesse: https://github.com/$Owner/$Repo/releases/new" -ForegroundColor Cyan
    Write-Host "2. Tag: $TagName" -ForegroundColor Cyan
    Write-Host "3. Title: $ReleaseName" -ForegroundColor Cyan
    Write-Host "4. Cole o conte√∫do de release-assets/RELEASE_NOTES_v1.5.1.md" -ForegroundColor Cyan
    Write-Host "5. Anexe os arquivos da pasta release-assets/" -ForegroundColor Cyan
} 