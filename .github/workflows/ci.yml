name: CI/CD Pipeline - RAG Python

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: 🧪 Testes Automatizados
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Cache dependências
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: 🔧 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: 🎨 Verificar formatação (Black)
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: 📋 Verificar imports (isort)
      run: |
        isort --check-only --diff .
      continue-on-error: true
    
    - name: 🔍 Análise estática (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: 🧪 Executar testes
      run: |
        python test_suite_complete.py
      env:
        # Mock das API keys para testes
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test_key' }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY || 'test_key' }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'test_key' }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY || 'test_key' }}
    
    - name: 📊 Cobertura de testes
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term
      continue-on-error: true
    
    - name: 📤 Upload cobertura para Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  security:
    name: 🔒 Análise de Segurança
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔒 Instalar ferramentas de segurança
      run: |
        pip install bandit safety
    
    - name: 🛡️ Verificar vulnerabilidades (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: 📦 Verificar dependências (Safety)
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: 📤 Upload relatórios de segurança
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  build:
    name: 🏗️ Build e Validação
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔧 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: 📋 Verificar configuração
      run: |
        python -c "from privacy_system import privacy_manager; print('✅ Privacy system OK')"
        python -c "from llm_providers import LLMProviderManager; print('✅ LLM providers OK')"
        python -c "from rag_system import RAGSystem; print('✅ RAG system OK')"
    
    - name: 🏗️ Build do pacote
      run: |
        python -m build
    
    - name: ✅ Verificar pacote
      run: |
        python -m twine check dist/*
    
    - name: 📤 Upload artefatos
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  integration-test:
    name: 🔗 Testes de Integração
    runs-on: ubuntu-latest
    needs: build
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_rag_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔧 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psycopg2-binary
    
    - name: 🗄️ Configurar banco de dados
      run: |
        export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/test_rag_db"
        python -c "
        import psycopg2
        conn = psycopg2.connect('postgresql://postgres:test_password@localhost:5432/test_rag_db')
        with open('schema.sql', 'r') as f:
            conn.cursor().execute(f.read())
        conn.commit()
        print('✅ Database initialized')
        "
    
    - name: 🧪 Testes de integração
      run: |
        python -c "
        from privacy_system import privacy_manager
        from llm_providers import LLMProviderManager
        
        # Teste básico de integração
        content = 'Teste: João (CPF: 123.456.789-10)'
        detection = privacy_manager.detect_personal_data_only(content)
        assert detection['has_personal_data']
        print('✅ Integration test passed')
        "
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_rag_db

  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy para staging
      run: |
        echo "🚀 Deploy para ambiente de staging..."
        echo "📦 Versão: $(python -c 'from __version__ import __version__; print(__version__)')"
        # Aqui seria implementado o deploy real

  deploy-production:
    name: 🌟 Deploy Produção
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🌟 Deploy para produção
      run: |
        echo "🌟 Deploy para ambiente de produção..."
        echo "📦 Versão: ${{ github.event.release.tag_name }}"
        # Aqui seria implementado o deploy real

  notification:
    name: 📢 Notificações
    runs-on: ubuntu-latest
    needs: [test, security, build, integration-test]
    if: always()
    
    steps:
    - name: 📢 Notificar resultado
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ Pipeline executado com sucesso!"
        else
          echo "❌ Pipeline falhou em alguma etapa"
        fi 