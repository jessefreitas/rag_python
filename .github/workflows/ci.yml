name: RAG Python CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.12'
  
jobs:
  # 🧪 TESTES E QUALIDADE
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: rag_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        pip install safety bandit
        
    - name: 🔍 Code Quality - Bandit Security
      run: bandit -r . -f json -o bandit-report.json || true
      
    - name: 🛡️ Security - Safety Check
      run: safety check --json --output safety-report.json || true
      
    - name: 🧪 Run Tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rag_test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        pytest test_pytest_suite.py test_integration_complete.py \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-report.xml \
          -v
          
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: 📋 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  # 🔒 TESTES ESPECÍFICOS LGPD
  privacy-tests:
    name: 🔒 LGPD Privacy Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock
        
    - name: 🔒 Run Privacy Tests
      run: |
        pytest test_pytest_suite.py::TestPrivacySystem \
          test_pytest_suite.py::TestIntegration::test_privacy_document_integration \
          -v --tb=short
          
    - name: 📋 Privacy Test Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: privacy-test-results
        path: pytest-report.xml

  # 🤖 TESTES CREWAI
  crewai-tests:
    name: 🤖 CrewAI Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock
        
    - name: 🤖 Run CrewAI Tests
      run: |
        pytest test_pytest_suite.py::TestCrewAIOrchestrator \
          -v --tb=short
          
    - name: 📋 CrewAI Test Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: crewai-test-results
        path: pytest-report.xml

  # 📄 TESTES GERAÇÃO DE DOCUMENTOS
  document-tests:
    name: 📄 Document Generation Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install LibreOffice (for PDF conversion)
      run: |
        sudo apt-get update
        sudo apt-get install -y libreoffice
        
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock
        
    - name: 📄 Run Document Tests
      run: |
        pytest test_pytest_suite.py::TestDocumentGeneration \
          -v --tb=short
          
    - name: 📋 Document Test Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: document-test-results
        path: pytest-report.xml

  # 🏗️ BUILD E VALIDAÇÃO
  build:
    name: 🏗️ Build & Validate
    runs-on: ubuntu-latest
    needs: [test, privacy-tests, crewai-tests, document-tests]
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
        
    - name: 🏗️ Build Package
      run: python -m build
      
    - name: ✅ Validate Package
      run: twine check dist/*
      
    - name: 📋 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/

  # 🚀 DEPLOY (apenas em releases)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 📦 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        
    - name: 🚀 Deploy to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
      
    - name: 🏷️ Create GitHub Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true

  # 📊 RELATÓRIO FINAL
  report:
    name: 📊 Final Report
    runs-on: ubuntu-latest
    needs: [test, privacy-tests, crewai-tests, document-tests, build]
    if: always()
    
    steps:
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v3
      
    - name: 📊 Generate Report
      run: |
        echo "# 🚀 RAG Python CI/CD Report" > report.md
        echo "" >> report.md
        echo "## 📋 Test Results Summary" >> report.md
        echo "- ✅ Main Tests: ${{ needs.test.result }}" >> report.md
        echo "- 🔒 Privacy Tests: ${{ needs.privacy-tests.result }}" >> report.md
        echo "- 🤖 CrewAI Tests: ${{ needs.crewai-tests.result }}" >> report.md
        echo "- 📄 Document Tests: ${{ needs.document-tests.result }}" >> report.md
        echo "- 🏗️ Build: ${{ needs.build.result }}" >> report.md
        echo "" >> report.md
        echo "## 🔗 Links" >> report.md
        echo "- [Commit: ${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> report.md
        echo "- [Branch: ${{ github.ref_name }}](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }})" >> report.md
        
    - name: 📋 Upload Final Report
      uses: actions/upload-artifact@v3
      with:
        name: final-report
        path: report.md

  # 🔄 CLEANUP
  cleanup:
    name: 🔄 Cleanup
    runs-on: ubuntu-latest
    needs: [report]
    if: always()
    
    steps:
    - name: 🧹 Cleanup Old Artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          // Keep only the last 10 artifacts
          const oldArtifacts = artifacts.data.artifacts
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
            .slice(10);
            
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          } 