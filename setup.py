#!/usr/bin/env python3
"""
Script de instala√ß√£o e configura√ß√£o do Sistema RAG Python
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def print_banner():
    """Exibe o banner do projeto"""
    print("""
ü§ñ Sistema RAG Python - Setup
=============================
""")

def check_python_version():
    """Verifica a vers√£o do Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Erro: Python 3.8+ √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} detectado")
    return True

def install_dependencies():
    """Instala as depend√™ncias do projeto"""
    print("\nüì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def create_env_file():
    """Cria arquivo .env se n√£o existir"""
    env_file = Path(".env")
    env_example = Path("env.example")
    
    if not env_file.exists() and env_example.exists():
        print("\nüîß Criando arquivo .env...")
        shutil.copy(env_example, env_file)
        print("‚úÖ Arquivo .env criado!")
        print("‚ö†Ô∏è  IMPORTANTE: Edite o arquivo .env com sua chave da OpenAI")
        return True
    elif env_file.exists():
        print("‚úÖ Arquivo .env j√° existe")
        return True
    else:
        print("‚ùå Arquivo env.example n√£o encontrado")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    directories = ["documents", "vector_db"]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio {directory}/ criado")

def test_installation():
    """Testa a instala√ß√£o"""
    print("\nüß™ Testando instala√ß√£o...")
    try:
        # Testar importa√ß√£o dos m√≥dulos principais
        import langchain
        import openai
        import streamlit
        import chromadb
        print("‚úÖ M√≥dulos principais importados com sucesso!")
        return True
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        return False

def show_next_steps():
    """Mostra os pr√≥ximos passos"""
    print("""
üéâ Instala√ß√£o conclu√≠da!

üìã Pr√≥ximos passos:

1. Configure sua API key da OpenAI:
   - Edite o arquivo .env
   - Adicione sua chave: OPENAI_API_KEY=sua_chave_aqui

2. Teste o sistema:
   python example.py

3. Execute a interface web:
   streamlit run app.py

4. Adicione documentos:
   - Coloque arquivos PDF, DOCX ou TXT na pasta documents/
   - Ou use a interface web para fazer upload

üìö Documenta√ß√£o:
   - README.md - Guia principal
   - DOCUMENTATION.md - Documenta√ß√£o t√©cnica

ü§ù Suporte:
   - GitHub: https://github.com/jessefreitas/rag_python
   - Issues: Para reportar problemas
""")

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    # Verificar vers√£o do Python
    if not check_python_version():
        sys.exit(1)
    
    # Instalar depend√™ncias
    if not install_dependencies():
        sys.exit(1)
    
    # Criar arquivo .env
    create_env_file()
    
    # Criar diret√≥rios
    create_directories()
    
    # Testar instala√ß√£o
    if not test_installation():
        print("‚ö†Ô∏è  Aviso: Alguns m√≥dulos n√£o puderam ser importados")
    
    # Mostrar pr√≥ximos passos
    show_next_steps()

if __name__ == "__main__":
    main() 